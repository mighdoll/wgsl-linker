// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`importing parses importing bar(A) fog(B) 1`] = `
[
  {
    "args": [
      "A",
    ],
    "end": 21,
    "kind": "import",
    "name": "bar",
    "start": 15,
  },
  {
    "args": [
      "B",
    ],
    "end": 29,
    "kind": "import",
    "name": "fog",
    "start": 23,
  },
]
`;

exports[`lineComment parse // #export  1`] = `
[
  {
    "end": 11,
    "kind": "export",
    "start": 3,
  },
]
`;

exports[`parse #export(A, B) importing bar(A) 1`] = `
{
  "args": [
    "A",
    "B",
  ],
  "end": 36,
  "importing": [
    {
      "args": [
        "A",
      ],
      "end": 35,
      "kind": "import",
      "name": "bar",
      "start": 29,
    },
  ],
  "kind": "export",
  "start": 5,
}
`;

exports[`parse #export(foo) with trailing space 1`] = `
[
  {
    "args": [
      "Elem",
    ],
    "end": 24,
    "kind": "export",
    "start": 8,
  },
]
`;

exports[`parse #import foo 1`] = `
[
  {
    "end": 11,
    "kind": "import",
    "name": "foo",
    "start": 0,
  },
]
`;

exports[`parse #import foo(a,b) as baz from bar 1`] = `
[
  {
    "as": "baz",
    "end": 27,
    "from": "bar",
    "kind": "import",
    "name": "foo",
    "start": 0,
  },
]
`;

exports[`parse @attribute before fn 1`] = `
[
  {
    "calls": [],
    "end": 31,
    "kind": "fn",
    "name": "main",
    "start": 5,
    "typeRefs": [],
  },
]
`;

exports[`parse @compute @workgroup_size(a, b, 1) before fn 1`] = `
[
  {
    "calls": [],
    "end": 61,
    "kind": "fn",
    "name": "main",
    "start": 5,
    "typeRefs": [],
  },
]
`;

exports[`parse alias 1`] = `[]`;

exports[`parse and ignore const_assert 1`] = `
[
  {
    "calls": [],
    "end": 42,
    "kind": "fn",
    "name": "main",
    "start": 30,
    "typeRefs": [],
  },
]
`;

exports[`parse and ignore global diagnostic 1`] = `
[
  {
    "calls": [],
    "end": 61,
    "kind": "fn",
    "name": "main",
    "start": 49,
    "typeRefs": [],
  },
]
`;

exports[`parse empty string 1`] = `[]`;

exports[`parse fn foo() { } 1`] = `
[
  {
    "calls": [],
    "end": 12,
    "kind": "fn",
    "name": "foo",
    "start": 0,
    "typeRefs": [],
  },
]
`;

exports[`parse fn with calls 1`] = `
[
  {
    "calls": [
      {
        "end": 14,
        "kind": "call",
        "name": "foo",
        "start": 11,
      },
      {
        "end": 21,
        "kind": "call",
        "name": "bar",
        "start": 18,
      },
    ],
    "end": 26,
    "kind": "fn",
    "name": "foo",
    "start": 0,
    "typeRefs": [],
  },
]
`;

exports[`parse fn with line comment 1`] = `
[
  {
    "calls": [],
    "end": 39,
    "kind": "fn",
    "name": "binaryOp",
    "start": 5,
    "typeRefs": [],
  },
]
`;

exports[`parse root level ;; 1`] = `[]`;

exports[`parse top level override and const 1`] = `
[
  {
    "end": 21,
    "kind": "var",
    "name": "x",
    "start": 5,
  },
  {
    "end": 38,
    "kind": "var",
    "name": "y",
    "start": 26,
  },
  {
    "calls": [],
    "end": 56,
    "kind": "fn",
    "name": "main",
    "start": 44,
    "typeRefs": [],
  },
]
`;

exports[`parse top level var 1`] = `
[
  {
    "end": 52,
    "kind": "var",
    "name": "u",
    "start": 5,
    "typeRefs": [
      {
        "end": 51,
        "kind": "typeRef",
        "name": "Uniforms",
        "start": 43,
      },
    ],
  },
  {
    "calls": [],
    "end": 76,
    "kind": "fn",
    "name": "main",
    "start": 64,
    "typeRefs": [],
  },
]
`;

exports[`skipBlockComment parses /* comment */ 1`] = `
{
  "named": {},
  "value": [
    "/*",
    [
      {
        "kind": "word",
        "text": "comment",
      },
    ],
    "*/",
  ],
}
`;

exports[`wordNumArgs parses (a, b, 1) 1`] = `
[
  "a",
  "b",
  "1",
]
`;

exports[`wordNumArgs parses (a, b, 1) with line comments everywhere 1`] = `
[
  "a",
  "b",
  "1",
]
`;
